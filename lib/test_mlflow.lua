---
--- Generated by Luanalysis
--- Created by jhoman.
--- DateTime: 3/14/23 1:14 AM
---

json = require("json")
url  = require("url")
lu   = require('luaunit')
ml   = require('mlflow')


function new_handle()
    local h = {
        reqBody = {
            body = "",
            getBytes = function(self, start, finish)
                return self.body:sub(start, finish)
            end,
            setBytes = function(self, body)
                self.body = body
            end,
            length = function(self)
                return self.body:len()
            end
        },
        head = {
            kv = {},
            set = function(self, key, value)
                self.kv[key] = value
            end,
            get = function(self, key)
                return self.kv[key]
            end,
            replace = function(self, key, value)
                return self:set(key, value)
            end
        },
        si = {
            meta = {
                kv = {},
                set = function(self, key, value)
                    self.kv[key] = value
                end,
                get = function(self, key)
                    return self.kv[key]
                end
            },
            dynamicMetadata = function(self)
                return self.meta
            end
        },
        headers = function(self)
            return self.head
        end,
        body = function(self)
            return self.reqBody
        end,
        streamInfo = function(self)
            return self.si
        end,
        logCritical = function(self, s)
            print(s)
        end
    }
    return h
end



-- Unit testing starts
require('luaunit')

TestEnvoyOnRequest = {} --class
function TestEnvoyOnRequest:test_experiment_create()
    req = new_handle()
    req:headers():set(":path", "/api/2.0/mlflow/experiments/create")
    req:headers():set(":method", "POST")
    req:body():setBytes(json:encode{
        name = "foo",
        artifact_location = "",
        tags = {{key = "foo", value = "bar"}},
    })
    req:headers():set("x-kubernetes-namespace", "baz")
    req:headers():set("content-type", "application/json")
    ml:envoy_on_request(req)
    body = json:decode(req:body():getBytes(0, req:body():length()))
    expected = {
        name = "baz-foo",
        artifact_location = "",
        tags = {{key = "foo", value = "bar"}, {key = "namespace", value = "baz"}},
    }
    lu.assertEquals(body, expected)
end

function TestEnvoyOnRequest:test_experiment_search()
    req = new_handle()
    req:headers():set(":path", "/api/2.0/mlflow/experiments/search?max_results=2000")
    req:headers():set(":method", "GET")
    req:headers():set("x-kubernetes-namespace", "baz")
    ml:envoy_on_request(req)
    expected = "/api/2.0/mlflow/experiments/search?filter=tags.namespace%20%3D%20'baz'&max_results=2000"

    req = new_handle()
    req:headers():set(":path", "/api/2.0/mlflow/experiments/search")
    req:headers():set(":method", "GET")
    req:headers():set("x-kubernetes-namespace", "baz")
    ml:envoy_on_request(req)
    expected = "/api/2.0/mlflow/experiments/search?filter=tags.namespace%20%3D%20'baz'"
    lu.assertEquals(req:headers():get(":path"), expected)
    lu.assertEquals(req:headers():get(":path"), expected)

    req = new_handle()
    req:headers():set(":path", "/api/2.0/mlflow/experiments/search?max_results=2000&filter=rmse>1")
    req:headers():set(":method", "GET")
    req:headers():set("x-kubernetes-namespace", "baz")
    ml:envoy_on_request(req)
    expected = "/api/2.0/mlflow/experiments/search?filter=rmse%3E1%20AND%20tags.namespace%20%3D%20'baz'&max_results=2000"
    lu.assertEquals(req:headers():get(":path"), expected)
end

function TestEnvoyOnRequest:test_experiment_get_by_name()
    req = new_handle()
    req:headers():set(":path", "/api/2.0/mlflow/experiments/get-by-name?experiment_name=foo")
    req:headers():set(":method", "GET")
    req:headers():set("x-kubernetes-namespace", "baz")
    ml:envoy_on_request(req)
    expected = "/api/2.0/mlflow/experiments/get-by-name?experiment_name=baz-foo"
    lu.assertEquals(req:headers():get(":path"), expected)
end

function TestEnvoyOnRequest:test_experiment_update()
    req = new_handle()
    req:headers():set(":path", "/api/2.0/mlflow/experiments/update")
    req:headers():set(":method", "POST")
    req:headers():set("content-type", "application/json")
    req:headers():set("x-kubernetes-namespace", "baz")
    req:body():setBytes(json:encode({new_name = "bar"}))
    ml:envoy_on_request(req)
    want = {new_name = "baz-bar"}
    got = json:decode(req:body():getBytes(0, req:body():length()))
    lu.assertEquals(got, want)
end

function TestEnvoyOnRequest:test_runs_create()
    cases = {
        {
            body = {
                name = "foo",
            },
            want = {
                name = "foo",
                tags = {{key = "namespace", value = "baz"}}
            }
        }
    }
    for _, case in pairs(cases) do
        req = new_handle()
        req:headers():set(":path", "/api/2.0/mlflow/runs/create")
        req:headers():set(":method", "POST")
        req:headers():set("content-type", "application/json")
        req:headers():set("x-kubernetes-namespace", "baz")
        req:body():setBytes(json:encode(case.body))
        ml:envoy_on_request(req)
        got = json:decode(req:body():getBytes(0, req:body():length()))
        lu.assertEquals(got, case.want)
    end
end

function TestEnvoyOnRequest:test_runs_log_batch()
    cases = {
        {
            body  = {},
            want = {
                tags = {{key = "namespace", value = "baz"}}
            },
        }
    }
    for _, case in pairs(cases) do
        req = new_handle()
        req:headers():set(":path", "/api/2.0/mlflow/runs/log-batch")
        req:headers():set(":method", "POST")
        req:headers():set("content-type", "application/json")
        req:headers():set("x-kubernetes-namespace", "baz")
        req:body():setBytes(json:encode(case.body))
        ml:envoy_on_request(req)
        got = json:decode(req:body():getBytes(0, req:body():length()))
        lu.assertEquals(got, case.want)
    end
end

os.exit(lu.LuaUnit.run())