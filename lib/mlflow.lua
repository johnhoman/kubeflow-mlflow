---
--- Generated by Luanalysis
--- Created by jhoman.
--- DateTime: 3/14/23 1:38 AM
---


local function startswith(s, prefix)
    return s:sub(1, prefix:len()) == prefix
end

local function endswith(s, suffix)
    return s:sub(s:len()-suffix:len()+1, s:len()) == suffix
end

local function trim_prefix(s, prefix)
    return s:sub(prefix:len()+1, s:len())
end

local function is_method(req, method)
    return req:headers():get(":method") == method
end

local function is_GET(req) return is_method(req, "GET") end
local function is_POST(req) return is_method(req, "POST") end

local function prefix_name(name, prefix)
    return prefix .. "-" .. name
end

local function prefix_attr_fn(attr, prefix)
    return function(data)
        data[attr] = prefix_name(data[attr], prefix)
    end
end

local function trim_prefix_attr_fn(attr, prefix)
    return function(data)
        data[attr] = trim_prefix(data[attr], prefix)
    end
end

local function add_namespace_tag_fn(namespace)
    return function(data)
        if data.tags == nil then
            data.tags = {}
        end
        table.insert(data.tags, { key = "namespace", value = namespace })
    end
end

local function rewrite_body(req, ...)
    if req:headers():get("content-type") ~= "application/json" then
        return
    end
    local data = json:decode(tostring(req:body():getBytes(0, req:body():length())))
    local args = table.pack(...)
    for _, fn in ipairs(args) do
        fn(data)
    end
    req:body():setBytes(json:encode(data))
    req:headers():replace("content-length", req:body():length())
end

local rewrite_query = function(req, ...)
    local path = req:headers():get(":path")
    local u = url.parse(path)
    for _, fn in ipairs(table.pack(...)) do
        fn(u.query)
    end
    req:headers():replace(":path", tostring(u))
end

local function set_namespace_filter_fn(namespace)
    return function(query)
        local f = string.format("tags.namespace = '%s'", namespace)
        if query.filter ~= nil then
            f = query.filter .. " AND " ..f
        end
        query.filter = f
    end
end

local function map_attr(attr, ...)
    --- rewrite_body(res, map_attr("experiment", trim_prefix_attr_fn("name", namespace)))
    local args = table.pack(...)
    return function(data)
        for k, _ in ipairs(data[attr]) do
            for _, fn in ipairs(args) do
                fn(data[attr][k])
            end
        end
    end
end

local function attr(attr, ...)
    --- rewrite_body(res, map_attr("experiment", trim_prefix_attr_fn("name", namespace)))
    local args = table.pack(...)
    return function(data)
        if data[attr] == nil then
            return
        end
        for fn in ipairs(args) do
            fn(data[attr])
        end
    end
end

local function remove_namespace_tags()
    return function(data)
        if data.tags == nil then
            return
        end
        out = {}
        for k, tag in pairs(data.tags) do
            if data.tag.key ~= "namespace" then
                table.insert(out, tag)
            end
        end
        data.tags = out
    end
end

M = {}

function M:envoy_on_request(req)
    local namespace = req:headers():get("x-kubernetes-namespace")
    if namespace == nil then
        req:respond({[":status"] = "403"}, "namespace is required")
        return
    end
    u = url.parse(req:headers():get(":path"))
    if not startswith(u.path, "/api") and not startswith(path, "/ajax-api") then
        return
    end

    --- these are needed in the response and this seems to be the only
    --- way to expose the path/namespace to the response
    req:streamInfo():dynamicMetadata():set("envoy.filters.http.lua", ":path", path)
    req:streamInfo():dynamicMetadata():set("envoy.filters.http.lua", ":namespace", namespace)

    if endswith(u.path, "/experiments/create") and is_GET(req) then
        rewrite_body(req, prefix_attr_fn("name", namespace), add_namespace_tag_fn(namespace))
    elseif endswith(u.path, "/experiments/search") and is_POST(req) then
        rewrite_query(req, set_namespace_filter_fn(namespace))
    elseif endswith(u.path, "/experiments/get")  and is_GET(req) then
        --- nothing to do
    elseif endswith(u.path, "/experiments/get-by-name")  and is_GET(req) then
        rewrite_query(req, prefix_attr_fn("experiment_name", namespace))
    elseif endswith(u.path, "/experiments/delete")  and is_POST(req) then
        --- nothing to do
    elseif endswith(u.path, "/experiments/restore")  and is_POST(req) then
        --- nothing to do
    elseif endswith(u.path, "/experiments/update") and is_POST(req) then
        rewrite_body(req, prefix_attr_fn("new_name", namespace))
    elseif endswith(u.path, "/runs/create") and is_POST(req) then
        rewrite_body(req, add_namespace_tag_fn(namespace))
    elseif endswith(u.path, "/runs/delete") and is_POST(req) then
        --- nothing to do
    elseif endswith(u.path, "/runs/restore") and is_POST(req) then
        --- nothing to do
    elseif endswith(u.path, "/runs/get") and is_method(req, "GET") then
        --- nothing to do
    elseif endswith(u.path, "/runs/log-metric") and is_POST(req) then
        --- nothing to do
    elseif endswith(u.path, "/runs/log-batch") and is_POST(req) then
        rewrite_body(req, add_namespace_tag_fn(namespace))
    elseif endswith(u.path, "/runs/log-model") and is_POST(req) then
        --- nothing to do
    elseif endswith(u.path, "/experiments/set-experiment-tag") and is_POST(req) then
        --- nothing to do
    elseif endswith(u.path, "/runs/set-tag") and is_method(req, "POST") then
        --- nothing to do
    elseif endswith(u.path, "/runs/delete-tag") and is_method(req, "POST") then
        --- nothing to do
    elseif endswith(u.path, "/runs/log-parameter") and is_POST(req) then
        --- nothing to do
    elseif endswith(u.path, "/metrics/get-history") and is_GET(req) then
        --- nothing to do
    elseif endswith(u.path, "/runs/search") and is_POST(req) then
        rewrite_query(req, set_namespace_filter_fn(namespace))
    elseif endswith(u.path, "/artifacts/list") and is_GET(req) then
        rewrite_query(req, set_namespace_filter_fn(namespace))
    elseif endswith(u.path, "/runs/update") and is_POST(req) then
        --- nothing to do
    elseif endswith(u.path, "/registered-models/create") and is_POST(req) then
        rewrite_body(req, prefix_attr_fn("name", namespace), add_namespace_tag_fn(namespace))
    elseif endswith(u.path, "/registered-models/get") and is_GET(req) then
        rewrite_query(req, prefix_attr_fn("name", namespace))
    elseif endswith(u.path, "/registered-models/rename") and is_POST(req) then
        rewrite_body(req, prefix_attr_fn("new_name", namespace), prefix_attr_fn("new", namespace))
    elseif endswith(u.path, "/registered-models/update") and is_method(req, "PATCH") then
        rewrite_body(req, prefix_attr_fn("name", namespace))
    elseif endswith(u.path, "/registered-models/delete") and is_method(req, "DELETE") then
        rewrite_body(req, prefix_attr_fn("name", namespace))
    elseif endswith(u.path, "/registered-models/get-latest-versions") and is_POST(req) then
        rewrite_body(req, prefix_attr_fn("name", namespace))
    elseif endswith(u.path, "/model-versions/create") and is_POST(req) then
        rewrite_body(req, prefix_attr_fn("name", namespace), add_namespace_tag_fn(namespace))
    elseif endswith(u.path, "/model-versions/get") and is_GET(req) then
        rewrite_body(req, prefix_attr_fn("name", namespace))
    elseif endswith(u.path, "/model-versions/update") and is_method(req, "PATCH") then
        rewrite_body(req, prefix_attr_fn("name", namespace))
    elseif endswith(u.path, "/model-versions/delete") and is_method(req, "DELETE") then
        rewrite_body(req, prefix_attr_fn("name", namespace))
    elseif endswith(u.path, "/model-versions/search") and is_method(req, "GET") then
        rewrite_query(req, set_namespace_filter_fn(namespace))
    elseif endswith(u.path, "/model-versions/get-download-uri") and is_method(req, "GET") then
        rewrite_body(req, prefix_attr_fn("name", namespace))
    elseif endswith(u.path, "/model-versions/transition-stage") and is_method(req, "POST") then
        rewrite_body(req, prefix_attr_fn("name", namespace))
    elseif endswith(u.path, "/registered-models/search") and is_method(req, "GET") then
        rewrite_query(req, set_namespace_filter_fn(namespace))
    elseif endswith(u.path, "/registered-models/set-tag") and is_method(req, "POST") then
        rewrite_body(req, prefix_attr_fn("name", namespace))
    elseif endswith(u.path, "/model-versions/set-tag") and is_method(req, "POST") then
        rewrite_body(req, prefix_attr_fn("name", namespace))
    elseif endswith(u.path, "/registered-models/delete-tag") and is_method(req, "DELETE") then
        rewrite_body(req, prefix_attr_fn("name", namespace))
    elseif endswith(u.path, "/model-versions/delete-tag") and is_method(req, "POST") then
        rewrite_body(req, prefix_attr_fn("name", namespace))
    end
end

function M:envoy_on_response(res)
    --- these are needed in the response and this seems to be the only
    --- way to expose the path/namespace to the response
    local req_data = res:streamInfo():dynamicMetadata():get("envoy.filters.http.lua")
    if req_data == nil or req_data[":path"] == nil then
        return
    end
    local path = req_data[":path"]
    local namespace = req_data[":namespace"]
    local u = url.parse(path)

    if endswith(u.path, "/experiments/create") and is_GET(res) then
        --- nothing to do
    elseif endswith(u.path, "/experiments/search") and is_POST(res) then
        rewrite_body(res, map_attr("experiments", trim_prefix_attr_fn("name", namespace), remove_namespace_tags()))
    elseif endswith(u.path, "/experiments/get")  and is_GET(res) then
        rewrite_body(res, attr("experiment", trim_prefix_attr_fn("name", namespace), remove_namespace_tags()))
    elseif endswith(u.path, "/experiments/get-by-name")  and is_GET(res) then
        rewrite_body(res, attr("experiment", trim_prefix_attr_fn("name", namespace), remove_namespace_tags()))
    elseif endswith(u.path, "/experiments/delete")  and is_POST(res) then
        --- nothing to do
    elseif endswith(u.path, "/experiments/restore")  and is_POST(res) then
        --- nothing to do
    elseif endswith(u.path, "/experiments/update") and is_POST(res) then
        --- nothing to do
    elseif endswith(u.path, "/runs/create") and is_POST(res) then
        --- nothing to do
    elseif endswith(u.path, "/runs/delete") and is_POST(res) then
        --- nothing to do
    elseif endswith(u.path, "/runs/restore") and is_POST(res) then
        --- nothing to do
    elseif endswith(u.path, "/runs/get") and is_method(res, "GET") then
        --- nothing to do
    elseif endswith(u.path, "/runs/log-metric") and is_POST(res) then
        --- nothing to do
    elseif endswith(u.path, "/runs/log-batch") and is_POST(res) then
        --- nothing to do
    elseif endswith(u.path, "/runs/log-model") and is_POST(res) then
        --- nothing to do
    elseif endswith(u.path, "/experiments/set-experiment-tag") and is_POST(res) then
        --- nothing to do
    elseif endswith(u.path, "/runs/set-tag") and is_method(res, "POST") then
        --- nothing to do
    elseif endswith(u.path, "/runs/delete-tag") and is_method(res, "POST") then
        --- nothing to do
    elseif endswith(u.path, "/runs/log-parameter") and is_POST(res) then
        --- nothing to do
    elseif endswith(u.path, "/metrics/get-history") and is_GET(res) then
        --- nothing to do
    elseif endswith(u.path, "/runs/search") and is_POST(res) then
        --- nothing to do
    elseif endswith(u.path, "/artifacts/list") and is_GET(res) then
        --- nothing to do
    elseif endswith(u.path, "/runs/update") and is_POST(res) then
        --- nothing to do
    elseif endswith(u.path, "/registered-models/create") and is_POST(res) then
        rewrite_body(res, attr("registered_model", trim_prefix_attr_fn("name", namespace), remove_namespace_tags()))
    elseif endswith(u.path, "/registered-models/get") and is_GET(res) then
        rewrite_body(res, attr("registered_model", trim_prefix_attr_fn("name", namespace), remove_namespace_tags()))
    elseif endswith(u.path, "/registered-models/rename") and is_POST(res) then
        rewrite_body(res, attr("registered_model", trim_prefix_attr_fn("name", namespace), remove_namespace_tags()))
    elseif endswith(u.path, "/registered-models/update") and is_method(res, "PATCH") then
        rewrite_body(res, attr("registered_model", trim_prefix_attr_fn("name", namespace), remove_namespace_tags()))
    elseif endswith(u.path, "/registered-models/delete") and is_method(res, "DELETE") then
        --- nothing to do
    elseif endswith(u.path, "/registered-models/get-latest-versions") and is_POST(res) then
        --- nothing to do
    elseif endswith(u.path, "/model-versions/create") and is_POST(res) then
        rewrite_body(res, attr("model_version", trim_prefix_attr_fn("name", namespace), remove_namespace_tags()))
    elseif endswith(u.path, "/model-versions/get") and is_GET(res) then
        rewrite_body(res, attr("model_version", trim_prefix_attr_fn("name", namespace), remove_namespace_tags()))
    elseif endswith(u.path, "/model-versions/update") and is_method(res, "PATCH") then
        rewrite_body(res, attr("model_version", trim_prefix_attr_fn("name", namespace), remove_namespace_tags()))
    elseif endswith(u.path, "/model-versions/delete") and is_method(res, "DELETE") then
        --- nothing to do
    elseif endswith(u.path, "/model-versions/search") and is_method(res, "GET") then
        rewrite_body(res, map_attr("model_versions", trim_prefix_attr_fn("name", namespace), remove_namespace_tags()))
    elseif endswith(u.path, "/model-versions/get-download-uri") and is_method(res, "GET") then
        --- nothing to do
    elseif endswith(u.path, "/model-versions/transition-stage") and is_method(res, "POST") then
        rewrite_body(res, attr("model_version", trim_prefix_attr_fn("name", namespace), remove_namespace_tags()))
    elseif endswith(u.path, "/registered-models/search") and is_method(res, "GET") then
        rewrite_body(res, map_attr("registered_models", trim_prefix_attr_fn("name", namespace), remove_namespace_tags()))
    elseif endswith(u.path, "/registered-models/set-tag") and is_method(res, "POST") then
        --- nothing to do
    elseif endswith(u.path, "/model-versions/set-tag") and is_method(res, "POST") then
        --- nothing to do
    elseif endswith(u.path, "/registered-models/delete-tag") and is_method(res, "DELETE") then
        --- nothing to do
    elseif endswith(u.path, "/model-versions/delete-tag") and is_method(res, "POST") then
        --- nothing to do
    end

end

return M